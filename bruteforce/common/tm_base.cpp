#include <stdio.h>
#include <iostream>
#include "data_sizes.h"
#include "tm_base.h"

TM_base::TM_base(RNG * rng_obj) : rng(rng_obj)
{
}

void TM_base::print_working_code()
{
	uint8 data[128];
	fetch_data(data);
	for (int i = 0; i < 128; i++)
	{
		printf("%02X ", data[i]);
	}
	printf("\n");
}

uint16 TM_base::generate_stats(uint32 key, uint32 data, key_schedule_entry* schedule_entries, bool use_hashing)
{
	return 0;
}

uint8 TM_base::check_machine_code(uint8* data, int length)
{
	// check for JAM (immediate failure)
	// check for illegal opcodes (immediate failure)
	// check for NOP (acceptable, but probably not correct)
	// Is the first section, up to the first jump of any kind, valid machine code?

	// If no illegal or jam opcodes are used then you can assume all opcodes were valid

	uint8 result = 0;

	bool first_jump_found = false;

	for (int i = 0; i < length - 2; i++)
	{
		uint8 opcode = data[reverse_offset(i)];
		if (opcode_type[opcode] & OP_JAM)
		{
			result |= USES_JAM;
			break;
		}
		else if (opcode_type[opcode] & OP_ILLEGAL)
		{
			result |= USES_ILLEGAL_OPCODES;
			break;
		}
		else if (opcode_type[opcode] & OP_NOP2)
		{
			result |= USES_UNOFFICIAL_NOPS;
		}
		else if (opcode_type[opcode] & OP_NOP)
		{
			result |= USES_NOP;
		}
		else if (opcode_type[opcode] & OP_JUMP && !first_jump_found)
		{
			result |= FIRST_BYTES_TO_JUMP_VALID;
			first_jump_found = true;
		}

		if (i == 0)
		{
			result |= FIRST_BYTE_VALID;
		}

		i += opcode_bytes_used[opcode] - 1;
	}

	return result;
}

uint8 TM_base::opcode_bytes_used[0x100] = { 1,2,0,0,2,2,2,0,1,2,1,0,3,3,3,0,
											2,2,0,0,2,2,2,0,1,3,1,0,2,3,3,0,
											3,2,0,0,2,2,2,0,1,2,1,0,3,3,3,0,
											2,2,0,0,2,2,2,0,1,3,1,0,2,3,3,0,
											1,2,0,0,2,2,2,0,1,2,1,0,3,3,3,0,
											2,2,0,0,2,2,2,0,1,3,1,0,2,3,3,0,
											1,2,0,0,2,2,2,0,1,2,1,0,3,3,3,0,
											2,2,0,0,2,2,2,0,1,3,1,0,2,3,3,0,
											2,2,2,0,2,2,2,0,1,2,1,0,3,3,3,0,
											2,2,0,0,2,2,2,0,1,3,1,0,0,3,0,0,
											2,2,2,0,2,2,2,0,1,2,1,0,3,3,3,0,
											2,2,0,0,2,2,2,0,1,3,1,0,3,3,3,0,
											2,2,2,0,2,2,2,0,1,2,1,0,3,3,3,0,
											2,2,0,0,2,2,2,0,1,3,1,0,2,3,3,0,
											2,2,2,0,2,2,2,0,1,2,1,0,3,3,3,0,
											2,2,0,0,2,2,2,0,1,3,1,0,2,3,3,0 };

uint8 TM_base::opcode_type[0x100] = { 0, 0, OP_JAM, OP_ILLEGAL, OP_NOP2, 0, 0, OP_ILLEGAL, 0, 0, 0, OP_ILLEGAL, OP_NOP2, 0, 0, OP_ILLEGAL, OP_JUMP, 0, OP_JAM, OP_ILLEGAL, OP_NOP2, 0, 0, OP_ILLEGAL, 0, 0, OP_NOP2, OP_ILLEGAL, OP_NOP2, 0, 0, OP_ILLEGAL, OP_JUMP, 0, OP_JAM, OP_ILLEGAL, 0, 0, 0, OP_ILLEGAL, 0, 0, 0, OP_ILLEGAL, 0, 0, 0, OP_ILLEGAL, OP_JUMP, 0, OP_JAM, OP_ILLEGAL, OP_NOP2, 0, 0, OP_ILLEGAL, 0, 0, OP_NOP2, OP_ILLEGAL, OP_NOP2, 0, 0, OP_ILLEGAL, OP_JUMP, 0, OP_JAM, OP_ILLEGAL, OP_NOP2, 0, 0, OP_ILLEGAL, 0, 0, 0, OP_ILLEGAL, OP_JUMP, 0, 0, OP_ILLEGAL, OP_JUMP, 0, OP_JAM, OP_ILLEGAL, OP_NOP2, 0, 0, OP_ILLEGAL, 0, 0, OP_NOP2, OP_ILLEGAL, OP_NOP2, 0, 0, OP_ILLEGAL, OP_JUMP, 0, OP_JAM, OP_ILLEGAL, OP_NOP2, 0, 0, OP_ILLEGAL, 0, 0, 0, OP_ILLEGAL, OP_JUMP, 0, 0, OP_ILLEGAL, OP_JUMP, 0, OP_JAM, OP_ILLEGAL, OP_NOP2, 0, 0, OP_ILLEGAL, 0, 0, OP_NOP2, OP_ILLEGAL, OP_NOP2, 0, 0, OP_ILLEGAL, OP_NOP2, 0, OP_NOP2, OP_ILLEGAL, 0, 0, 0, OP_ILLEGAL, 0, OP_NOP2, 0, OP_ILLEGAL, 0, 0, 0, OP_ILLEGAL, OP_JUMP, 0, OP_JAM, OP_ILLEGAL, 0, 0, 0, OP_ILLEGAL, 0, 0, 0, OP_ILLEGAL, OP_ILLEGAL, 0, OP_ILLEGAL, OP_ILLEGAL, 0, 0, 0, OP_ILLEGAL, 0, 0, 0, OP_ILLEGAL, 0, 0, 0, OP_ILLEGAL, 0, 0, 0, OP_ILLEGAL, OP_JUMP, 0, OP_JAM, OP_ILLEGAL, 0, 0, 0, OP_ILLEGAL, 0, 0, 0, OP_ILLEGAL, 0, 0, 0, OP_ILLEGAL, 0, 0, OP_NOP2, OP_ILLEGAL, 0, 0, 0, OP_ILLEGAL, 0, 0, 0, OP_ILLEGAL, 0, 0, 0, OP_ILLEGAL, OP_JUMP, 0, OP_JAM, OP_ILLEGAL, OP_NOP2, 0, 0, OP_ILLEGAL, 0, 0, OP_NOP2, OP_ILLEGAL, OP_NOP2, 0, 0, OP_ILLEGAL, 0, 0, OP_NOP2, OP_ILLEGAL, 0, 0, 0, OP_ILLEGAL, 0, 0, OP_NOP, OP_ILLEGAL, 0, 0, 0, OP_ILLEGAL, OP_JUMP, 0, OP_JAM, OP_ILLEGAL, OP_NOP2, 0, 0, OP_ILLEGAL, 0, 0, OP_NOP2, OP_ILLEGAL, OP_NOP2, 0, 0, OP_ILLEGAL };



ALIGNED(64) uint8 TM_base::carnival_data[128] = 
{   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x3D, 0x5E, 0xA1, 0xA6, 0xC8, 0x23,
	0xD7, 0x6E, 0x3F, 0x7C, 0xD2, 0x46, 0x1B, 0x9F, 0xAB, 0xD2,
	0x5C, 0x9B, 0x32, 0x43, 0x67, 0x30, 0xA0, 0xA4, 0x23, 0xF3,
	0x27, 0xBF, 0xEA, 0x21, 0x0F, 0x13, 0x31, 0x1A, 0x15, 0xA1,
	0x39, 0x34, 0xE4, 0xD2, 0x52, 0x6E, 0xA6, 0xF7, 0xF6, 0x43,
	0xD1, 0x28, 0x41, 0xD8, 0xDC, 0x55, 0xE1, 0xC5, 0x49, 0xF5,
	0xD4, 0x84, 0x52, 0x1F, 0x90, 0xAB, 0x26, 0xE4, 0x2A, 0xC3,
	0xC2, 0x59, 0xAC, 0x81, 0x58, 0x35, 0x7A, 0xC3, 0x51, 0x9A,
	0x01, 0x04, 0xF5, 0xE2, 0xFB, 0xA7, 0xAE, 0x8B, 0x46, 0x9A,
	0x27, 0x41, 0xFA, 0xDD, 0x63, 0x72, 0x23, 0x7E, 0x1B, 0x44,
	0x5A, 0x0B, 0x2A, 0x3C, 0x09, 0xFA, 0xA3, 0x59, 0x3C, 0xA1,
	0xF0, 0x90, 0x4F, 0x46, 0x9E, 0xD1, 0xD7, 0xF4 };

ALIGNED(64) uint8 TM_base::carnival_checksum_mask[128] =
{   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };

ALIGNED(64) uint8 TM_base::other_world_data[128] = 
{   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xCA, 0x68, 0xC1, 0x66, 0x44,
	0xD2, 0x04, 0x0B, 0x90, 0x81, 0x86, 0xC7, 0xF4, 0xD2, 0xE2,
	0xF1, 0x22, 0xE3, 0x0C, 0xD9, 0x54, 0xFB, 0xFF, 0x0A, 0xCF,
	0x81, 0x72, 0x0A, 0x94, 0x9A, 0x98, 0xD3, 0xFF, 0xAB, 0x80,
	0x9A, 0xE5, 0xB7, 0x45, 0x6E, 0x8F, 0xD2, 0xF0, 0x67, 0xFF,
	0xB3, 0xAE, 0x49, 0xBB, 0x9C, 0x06, 0x12, 0x40, 0x49, 0xA3,
	0x9A, 0xDB, 0x32, 0x7B, 0x58, 0xA1, 0x5A, 0xB9, 0x2B, 0x2B,
	0x2D, 0x6E, 0x36, 0x93, 0x1C, 0x1A, 0x52, 0x03, 0x18, 0xE4,
	0x5E, 0xB1, 0xC1, 0xBD, 0x44, 0xFB, 0xF1, 0x50 };

ALIGNED(64) uint8 TM_base::other_world_checksum_mask[128] = 
{   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };